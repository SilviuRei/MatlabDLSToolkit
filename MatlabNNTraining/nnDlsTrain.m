function [deltaT, net] = nnDlsTrain(acf, d, nnHidden)
%------------------------------------------------------------
% Version 20171030, Silviu Rei
% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Script modified by Silviu Rei for PhD NN DLS project
% Created 05-Jan-2017 14:17:14
%
% function [deltaT, net] = nnDlsTrain(x, t, n)
% Inputs:
%	acf             = input training vector
%	d               = target vector
%	nnHidden        = number of neurons in the hidden layer
% Outputs:
%	deltaT          = training time in seconds
%	net             = matlab neural network object
%------------------------------------------------------------

t0 = clock;

% Create directories for saving the files
mkdir('nn_dls');
mkdir('nn_dls/nn_dls_figs');
mkdir('nn_dls/nn_dls_workspace');
mkdir('nn_dls/nn_dls_data');

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
%trainFcn = 'trainscg';
trainFcn = 'traincgf';

% Create a Fitting Network
hiddenLayerSize = nnHidden;
net = fitnet(hiddenLayerSize,trainFcn);
%net.trainParam.showWindow = 0;%uncoment to hide training window
net.trainParam.showWindow = 1;%uncomment to show training window

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Clear the post and pre processing of Matlab
net.inputs{1}.processFcns = {};
net.outputs{2}.processFcns = {};

% Train the Network
[net,tr] = train(net,acf,d);

% Test the Network
y = net(acf);
e = gsubtract(d,y);
performance = perform(net,d,y);

% View the Network
%view(net)

% Plots
% Uncomment these lines to enable various plots.
%h = figure, plotperform(tr)
%saveas(h, 'nn_dls/nn_dls_figs/nn_dls_performance.png');
%h = figure, plottrainstate(tr)
%saveas(h, 'nn_dls/nn_dls_figs/nn_dls_trainstate.png');
%h = figure, ploterrhist(e)
%saveas(h, 'nn_dls/nn_dls_figs/nn_dls_errhist.png');
%h = figure, plotregression(t,y);
h = plotregression(d,y);
saveas(h, ['nn_dls/nn_dls_figs/nn_dls_regression' num2str(nnHidden) '.png']);

%h = figure, plotfit(net,x,t)
%saveas(h, 'nn_dls/nn_dls_figs/nn_dls_fit.png');

%save('nn_dls/nn_dls_workspace/DLS_NN.mat');

% Generate nn function - Matlab
genFunction(net,'nn_dls','MatrixOnly','yes', 'ShowLinks','no');

% Export NN weights and biases
wb = formwb(net, net.b, net.iw, net.lw);
[b, iw, lw] = separatewb(net, wb);
w1 = iw{1,1};
w2 = lw{2,1};
b1 = b{1,1};
b2 = b{2,1};
csvwrite('nn_dls/nn_dls_data/w1.csv',w1);
csvwrite('nn_dls/nn_dls_data/w2.csv',w2);
csvwrite('nn_dls/nn_dls_data/b1.csv',b1);
csvwrite('nn_dls/nn_dls_data/b2.csv',b2);
%save('nn_dls/nn_dls_data/w1.txt','w1','-ascii');
%save('nn_dls/nn_dls_data/w2.txt','w2','-ascii');
%save('nn_dls/nn_dls_data/b1.txt','b1','-ascii');
%save('nn_dls/nn_dls_data/b2.txt','b2','-ascii');
t1 = clock;
deltaT = etime(t1,t0);
[h, m, s] = sec2time(deltaT);
disp(['[+++] Total Duration of Training DLS NN = ' num2str(h) 'h ' num2str(m) 'm ' num2str(s) 's']);
